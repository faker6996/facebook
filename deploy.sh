#!/bin/bash
set -euo pipefail

# --- C·∫§U H√åNH D·ª∞ √ÅN ---
# Facebook Next.js App
FB_REPO_URL="https://github.com/faker6996/facebook.git"
FB_WORKDIR="/home/infvn/fb/fb_src"
FB_BRANCH="main"
FB_ENV_FILE="$FB_WORKDIR/.env"
# T√™n service trong file docker-compose.prod.yml
FB_DOCKER_SERVICE_NAME="web" # <-- THAY ƒê·ªîI: Ph·∫£i kh·ªõp v·ªõi t√™n service trong docker-compose.yml

# Chat Server (.NET)
CHAT_REPO_URL="https://github.com/faker6996/chat-server.git"
CHAT_WORKDIR="/home/infvn/fb/chat_server_src"
CHAT_BRANCH="main"
CHAT_ENV_FILE="$CHAT_WORKDIR/.env"
# T√™n service trong file docker-compose.prod.yml
CHAT_DOCKER_SERVICE_NAME="chat-server" # <-- Gi·ªØ nguy√™n, ƒë√£ kh·ªõp

# --- H√ÄM LOG ---
log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
}

# --- BI·∫æN TR·∫†NG TH√ÅI ---
# M·∫∑c ƒë·ªãnh l√† kh√¥ng c·∫ßn build l·∫°i chat-server
SHOULD_BUILD_CHAT_SERVER=false

# ==============================================================================
# B·∫ÆT ƒê·∫¶U QU√Å TR√åNH DEPLOY
# ==============================================================================

log "üöÄ B·∫Øt ƒë·∫ßu deploy t·ªïng h·ª£p (Facebook & Chat Server)"

# --- 1. X·ª¨ L√ù SOURCE CODE FACEBOOK ---
log "-----------------------------------------------------"
log "üåê X·ª≠ l√Ω source code Facebook Next.js"
log "-----------------------------------------------------"

# T·∫°o th∆∞ m·ª•c ch·ª©a source n·∫øu ch∆∞a c√≥
if [ ! -d "$(dirname "$FB_WORKDIR")" ]; then
  mkdir -p "$(dirname "$FB_WORKDIR")"
fi

# Clone/pull m√£ ngu·ªìn Facebook
if [ -d "$FB_WORKDIR/.git" ]; then
  log "üîÑ Repo Facebook ƒë√£ t·ªìn t·∫°i, pull v·ªÅ branch $FB_BRANCH"
  cd "$FB_WORKDIR"
  git fetch origin
  git checkout "$FB_BRANCH"
  git reset --hard "origin/$FB_BRANCH"
else
  log "üì• Clone m·ªõi Facebook v·ªÅ $FB_WORKDIR"
  git clone "$FB_REPO_URL" "$FB_WORKDIR"
  cd "$FB_WORKDIR"
  git checkout "$FB_BRANCH"
fi

log "üìÇ ƒêang ·ªü th∆∞ m·ª•c: $(pwd)"
if [ -f "$FB_ENV_FILE" ]; then
  log "‚úÖ T√¨m th·∫•y ENV file cho Facebook: $FB_ENV_FILE"
else
  log "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ENV file cho Facebook ‚Äî docker-compose c√≥ th·ªÉ fail n·∫øu thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng"
fi


# --- 2. X·ª¨ L√ù SOURCE CODE CHAT SERVER ---
log "-----------------------------------------------------"
log "üí¨ X·ª≠ l√Ω source code Chat Server .NET"
log "-----------------------------------------------------"

# T·∫°o th∆∞ m·ª•c ch·ª©a source n·∫øu ch∆∞a c√≥
if [ ! -d "$(dirname "$CHAT_WORKDIR")" ]; then
  mkdir -p "$(dirname "$CHAT_WORKDIR")"
fi

# Clone/pull m√£ ngu·ªìn Chat Server v√† ki·ªÉm tra thay ƒë·ªïi
if [ -d "$CHAT_WORKDIR/.git" ]; then
  log "üîÑ Repo Chat Server ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra thay ƒë·ªïi tr√™n branch $CHAT_BRANCH"
  cd "$CHAT_WORKDIR"
  
  BEFORE_PULL_HASH=$(git rev-parse HEAD)
  log "Commit hash hi·ªán t·∫°i: $BEFORE_PULL_HASH"

  git fetch origin
  git checkout "$CHAT_BRANCH"
  git reset --hard "origin/$CHAT_BRANCH"
  
  AFTER_PULL_HASH=$(git rev-parse HEAD)
  log "Commit hash m·ªõi nh·∫•t: $AFTER_PULL_HASH"

  if [ "$BEFORE_PULL_HASH" != "$AFTER_PULL_HASH" ]; then
    log "‚ú® Ph√°t hi·ªán c√≥ thay ƒë·ªïi m·ªõi cho Chat Server. S·∫Ω ti·∫øn h√†nh build l·∫°i."
    SHOULD_BUILD_CHAT_SERVER=true
  else
    log "‚úÖ Kh√¥ng c√≥ thay ƒë·ªïi m·ªõi cho Chat Server. B·ªè qua b∆∞·ªõc build."
  fi
else
  log "üì• Clone m·ªõi Chat Server v·ªÅ $CHAT_WORKDIR"
  git clone "$CHAT_REPO_URL" "$CHAT_WORKDIR"
  cd "$CHAT_WORKDIR"
  git checkout "$CHAT_BRANCH"
  log "‚ú® ƒê√¢y l√† l·∫ßn clone ƒë·∫ßu ti√™n. S·∫Ω ti·∫øn h√†nh build."
  SHOULD_BUILD_CHAT_SERVER=true
fi

log "üìÇ ƒêang ·ªü th∆∞ m·ª•c: $(pwd)"
if [ -f "$CHAT_ENV_FILE" ]; then
  log "‚úÖ T√¨m th·∫•y ENV file cho Chat Server: $CHAT_ENV_FILE"
else
  log "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ENV file cho Chat Server ‚Äî docker-compose c√≥ th·ªÉ fail n·∫øu thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng"
fi


# --- 3. D·ª™NG V√Ä BUILD L·∫†I DOCKER ---
log "-----------------------------------------------------"
log "üê≥ X·ª≠ l√Ω Docker Compose"
log "-----------------------------------------------------"

# QUAN TR·ªåNG: Di chuy·ªÉn v√†o th∆∞ m·ª•c ch·ª©a docker-compose.prod.yml
# ƒë·ªÉ ƒë·∫£m b·∫£o c√°c ƒë∆∞·ªùng d·∫´n context (build: context) ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng
log "üìÇ Di chuy·ªÉn t·ªõi th∆∞ m·ª•c project ch√≠nh: $FB_WORKDIR"
cd "$FB_WORKDIR"

# Gi·ªù c√°c l·ªánh docker compose s·∫Ω ƒë∆∞·ª£c ch·∫°y t·ª´ ƒë√∫ng th∆∞ m·ª•c
log "üõë D·ª´ng c√°c container c≈© n·∫øu c√≥ (l·ªánh 'down' s·∫Ω kh√¥ng b√°o l·ªói n·∫øu kh√¥ng c√≥ container)"
docker compose -f docker-compose.prod.yml down --remove-orphans || true

# Lu√¥n build l·∫°i Facebook app (theo logic script g·ªëc)
log "üî® Build l·∫°i image cho $FB_DOCKER_SERVICE_NAME (lu√¥n th·ª±c hi·ªán)"
docker compose -f docker-compose.prod.yml build --no-cache "$FB_DOCKER_SERVICE_NAME"

# Ch·ªâ build l·∫°i chat-server n·∫øu c√≥ thay ƒë·ªïi
if [ "$SHOULD_BUILD_CHAT_SERVER" = "true" ]; then
  log "üî® Chat Server c√≥ thay ƒë·ªïi, build l·∫°i image cho $CHAT_DOCKER_SERVICE_NAME"
  docker compose -f docker-compose.prod.yml build --no-cache "$CHAT_DOCKER_SERVICE_NAME"
else
  log "üëç B·ªè qua build Chat Server."
fi

log "üöÄ Kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô c√°c container..."
docker compose -f docker-compose.prod.yml up -d

log "‚úÖ Ho√†n t·∫•t deploy!"
